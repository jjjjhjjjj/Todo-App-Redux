{"version":3,"sources":["components/Header/Header.jsx","components/LandingPage/Section/InsertTodo/InsertTodo.jsx","modules/todos.js","containers/InsertTodoContainer.jsx","components/LandingPage/Section/TodoCount/TodoCount.jsx","containers/TodoCountContainer.jsx","components/LandingPage/Section/TodoList/ButtonList/ButtonList.jsx","containers/ButtonListContainer.jsx","components/LandingPage/Section/TodoItem/TodoItem.jsx","containers/TodoItemContainer.jsx","components/LandingPage/Section/TodoList/TodoList.jsx","containers/TodoListContainer.jsx","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["Header","memo","className","InsertTodo","addTodo","useState","todoText","setTodoText","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","initialState","todos","id","text","checked","listType","todoId","state","action","map","todo","filter","connect","TodoCount","doingCnt","setDoingCnt","completedCnt","setCompletedCnt","todoCount","useCallback","length","useEffect","ButtonList","changeListType","onClick","TodoItem","checkTodo","deleteTodo","cn","ownProps","TodoList","typeTodos","setTypeTodos","_typeMessage","useRef","current","key","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d676125.chunk.js","sourcesContent":["import React, { memo } from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = memo(() => {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1 className=\"title\">To-Do List</h1>\r\n\t\t\t<p className=\"desc\">What is your One Small Step?</p>\r\n\t\t</header>\r\n\t);\r\n});\r\n\r\nexport default Header;\r\n","import React, { memo, useState } from 'react';\r\nimport './InsertTodo.css';\r\n\r\nconst InsertTodo = memo(({ addTodo }) => {\r\n\tconst [todoText, setTodoText] = useState('');\r\n\r\n\tconst onChange = e => {\r\n\t\te.preventDefault();\r\n\t\tsetTodoText(e.target.value);\r\n\t};\r\n\r\n\tconst onSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\taddTodo(todoText);\r\n\t\tsetTodoText('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={onSubmit} className=\"insert-form\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"todo-input\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={onChange}\r\n\t\t\t\tvalue={todoText}\r\n\t\t\t\tplaceholder=\"할 일을 적어주세요.\"\r\n\t\t\t/>\r\n\t\t\t<button className=\"todo-submit-btn\" type=\"submit\">\r\n\t\t\t\t추가\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t);\r\n});\r\n\r\nexport default InsertTodo;\r\n","//액션 타입 정의\r\nconst ADD_TODO = '/todo/ADD_TODO';\r\nconst CHECK_TODO = '/todo/CHECK_TODO';\r\nconst DELETE_TODO = '/todo/DELETE_TODO';\r\nconst CHANGE_LIST_TYPE = '/todo/CHANGE_LIST_TYPE';\r\n\r\n//액션 생성 함수\r\nexport const addTodo = text => ({ type: ADD_TODO, text });\r\nexport const checkTodo = id => ({ type: CHECK_TODO, id });\r\nexport const deleteTodo = id => ({ type: DELETE_TODO, id });\r\nexport const changeListType = listType => ({ type: CHANGE_LIST_TYPE, listType });\r\n\r\n//초기 상태 및 리듀서 함수 만들기\r\n\r\nconst initialState = {\r\n\ttodos: [\r\n\t\t{\r\n\t\t\tid: 1,\r\n\t\t\ttext: '리액트 공부하기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 2,\r\n\t\t\ttext: '자바스크립트 공부하기',\r\n\t\t\tchecked: false,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 3,\r\n\t\t\ttext: '책 읽기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 4,\r\n\t\t\ttext: '게임하기',\r\n\t\t\tchecked: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 5,\r\n\t\t\ttext: '운동하기',\r\n\t\t\tchecked: false,\r\n\t\t},\r\n\t],\r\n\tlistType: 'all',\r\n};\r\n\r\nlet todoId = 6;\r\n\r\nconst todos = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_TODO:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttodos: [...state.todos, { id: todoId++, text: action.text, checked: false }],\r\n\t\t\t};\r\n\t\tcase CHECK_TODO:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttodos: state.todos.map(todo =>\r\n\t\t\t\t\ttodo.id === action.id ? { ...todo, checked: !todo.checked } : todo,\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\tcase DELETE_TODO:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttodos: state.todos.filter(todo => todo.id !== action.id),\r\n\t\t\t};\r\n\t\tcase CHANGE_LIST_TYPE:\r\n\t\t\treturn { ...state, listType: action.listType };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default todos;\r\n","import React from 'react';\r\nimport InsertTodo from '../components/LandingPage/Section/InsertTodo/InsertTodo';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../modules/todos';\r\n\r\nconst InsertTodoContainer = ({ addTodo }) => {\r\n\treturn <InsertTodo addTodo={addTodo} />;\r\n};\r\n\r\nexport default connect('', { addTodo })(InsertTodoContainer);\r\n","import React, { useState, useEffect, memo } from 'react';\r\nimport { useCallback } from 'react';\r\nimport './TodoCount.css';\r\n\r\nconst TodoCount = memo(({ todos }) => {\r\n\tconst [doingCnt, setDoingCnt] = useState();\r\n\tconst [completedCnt, setCompletedCnt] = useState();\r\n\r\n\tconst todoCount = useCallback(() => {\r\n\t\tsetDoingCnt(todos.filter(todo => todo.checked === false).length);\r\n\t\tsetCompletedCnt(todos.filter(todo => todo.checked === true).length);\r\n\t}, [todos]);\r\n\r\n\tuseEffect(() => {\r\n\t\ttodoCount();\r\n\t}, [todoCount]);\r\n\r\n\treturn (\r\n\t\t<p className=\"todo-count\">\r\n\t\t\tDoing : {doingCnt} || completed: {completedCnt}\r\n\t\t</p>\r\n\t);\r\n});\r\n\r\nexport default TodoCount;\r\n","import React from 'react';\r\nimport TodoCount from '../components/LandingPage/Section/TodoCount/TodoCount';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TodoCountContainer = ({ todos }) => {\r\n\treturn <TodoCount todos={todos} />;\r\n};\r\n\r\nexport default connect(\r\n\tstate => ({\r\n\t\ttodos: state.todos.todos,\r\n\t}),\r\n\t{},\r\n)(TodoCountContainer);\r\n","import React, { memo } from 'react';\r\nimport './ButtonList.css';\r\n\r\nconst ButtonList = memo(({ listType, changeListType }) => {\r\n\tconst onClick = type => {\r\n\t\tchangeListType(type);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul className=\"todo-button-list\">\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('all')}\r\n\t\t\t\t\tclassName={listType === 'all' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| ALL\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('doing')}\r\n\t\t\t\t\tclassName={listType === 'doing' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| DOING\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\tonClick={() => onClick('completed')}\r\n\t\t\t\t\tclassName={listType === 'completed' ? 'active' : ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t|| COMPLETED\r\n\t\t\t\t</button>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t);\r\n});\r\n\r\nexport default ButtonList;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeListType } from '../modules/todos';\r\nimport ButtonList from '../components/LandingPage/Section/TodoList/ButtonList/ButtonList';\r\n\r\nconst ButtonListContainer = ({ listType, changeListType }) => {\r\n\treturn <ButtonList listType={listType} changeListType={changeListType} />;\r\n};\r\n\r\nexport default connect(\r\n\tstate => ({\r\n\t\tlistType: state.todos.listType,\r\n\t}),\r\n\t{ changeListType },\r\n)(ButtonListContainer);\r\n","import React, { memo } from 'react';\r\nimport './TodoItem.css';\r\nimport cn from 'classnames';\r\nimport { IoIosCheckboxOutline, IoIosCheckbox, IoIosTrash } from 'react-icons/io';\r\n\r\nconst TodoItem = memo(({ todo, checkTodo, deleteTodo }) => {\r\n\tconst { checked } = todo;\r\n\treturn (\r\n\t\t<li className=\"todo-item\">\r\n\t\t\t<strong className={cn('item-text', { checked })}>{todo.text}</strong>\r\n\t\t\t<div className=\"btn-box\">\r\n\t\t\t\t{checked === true ? (\r\n\t\t\t\t\t<IoIosCheckbox onClick={() => checkTodo(todo.id)} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<IoIosCheckboxOutline onClick={() => checkTodo(todo.id)} />\r\n\t\t\t\t)}\r\n\r\n\t\t\t\t<IoIosTrash onClick={() => deleteTodo(todo.id)} />\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t);\r\n});\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from '../components/LandingPage/Section/TodoItem/TodoItem';\r\nimport { connect } from 'react-redux';\r\nimport { checkTodo, deleteTodo } from '../modules/todos';\r\n\r\nconst TodoItemContainer = ({ todo, deleteTodo, checkTodo }) => {\r\n\treturn <TodoItem todo={todo} deleteTodo={deleteTodo} checkTodo={checkTodo} />;\r\n};\r\n\r\nexport default connect(\r\n\t(state, ownProps) => ({\r\n\t\ttodo: ownProps.todo,\r\n\t}),\r\n\r\n\t{ checkTodo, deleteTodo },\r\n)(TodoItemContainer);\r\n","import React, { useState, useEffect, useRef, memo } from 'react';\r\nimport ButtonListContainer from '../../../../containers/ButtonListContainer';\r\nimport TodoItemContainer from '../../../../containers/TodoItemContainer';\r\nimport './TodoList.css';\r\n\r\nconst TodoList = memo(({ listType, todos }) => {\r\n\tconst [typeTodos, setTypeTodos] = useState([]);\r\n\tconst _typeMessage = useRef('');\r\n\r\n\tuseEffect(() => {\r\n\t\tif (listType === 'doing') {\r\n\t\t\t_typeMessage.current = 'Cheer Up !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === false));\r\n\t\t} else if (listType === 'completed') {\r\n\t\t\t_typeMessage.current = 'Congratulations !';\r\n\t\t\tsetTypeTodos(todos.filter(todo => todo.checked === true));\r\n\t\t} else {\r\n\t\t\t_typeMessage.current = \"It's up to you !\";\r\n\t\t\tsetTypeTodos(todos);\r\n\t\t}\r\n\t}, [listType, todos]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ButtonListContainer />\r\n\t\t\t<h2 className=\"list-title\">{_typeMessage.current}</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{typeTodos.map(todo => (\r\n\t\t\t\t\t<TodoItemContainer key={todo.id} todo={todo} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport TodoList from '../components/LandingPage/Section/TodoList/TodoList';\r\nimport { connect } from 'react-redux';\r\n\r\nconst TodoListContainer = ({ todos, listType }) => {\r\n\treturn <TodoList todos={todos} listType={listType} />;\r\n};\r\n\r\nexport default connect(\r\n\tstate => ({\r\n\t\ttodos: state.todos.todos,\r\n\t\tlistType: state.todos.listType,\r\n\t}),\r\n\t{},\r\n)(TodoListContainer);\r\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport './App.css';\nimport InsertTodoContainer from './containers/InsertTodoContainer';\nimport TodoCountContainer from './containers/TodoCountContainer';\nimport TodoListContainer from './containers/TodoListContainer';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"landing\">\n\t\t\t<Header />\n\t\t\t<InsertTodoContainer />\n\t\t\t<TodoCountContainer />\n\t\t\t<TodoListContainer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodos,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}